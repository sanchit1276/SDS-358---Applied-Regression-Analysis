setwd("~/Graduate School/UT-Austin - MSIS/SDS 358 - Applied Regression Analysis/Lab10")
library(SDSRegressionR)
#Bring in data
math <- read_csv("data/mathComp.csv")
names(math)
View(math)
#Establish cut-off
cutoff <- 215
#Code the data for the cut-off
math2 <- math %>%
mutate_at(vars(pretest), as.numeric) %>% #Initial catch all for numeric...
mutate(pre1 = pretest, #Simple replication
pre2 = pretest - cutoff, #Start second segment counting...
pre2 = case_when(pre1 <= cutoff ~ 0, #Make sure to start at zero BEFORE segment
TRUE ~ pre2),
jump = case_when(pretest < cutoff ~ 0, #Define the segment status...
pretest >= cutoff ~ 1))
#Check
plyr::count(math2, c("pretest", "pre1", "pre2", "jump"))
#Inital model run and diagnostics
full <- lm(posttest ~ pre1 + jump + pre2, data=math2)
residFitted(full)
cooksPlot(full, key.variable="ID", print.obs=TRUE, sort.obs = TRUE)
threeOuts(full, key.variable="ID")
#Get good data...
#Let's remove ALL
cooks <- cooksPlot(full, key.variable="ID", print.obs=TRUE, sort.obs = TRUE)
g_math <- math2 %>%
filter(ID %not in% cooks$ID)
#Initial look
simpleScatter(g_math, pretest, posttest, title="Raw Data")
#Look with means
mns_math <- g_math %>%
group_by(pretest) %>%
summarise(mean = mean(posttest, rm.rm=TRUE))
g_mns <- simpleScatter(mns_math, pretest, mean, title="Means Plot")
g_mns
#Run the model
seg <- lm(posttest ~ pre1 + jump + pre2, data=g_math)
summary(seg)
#Come up with prediction lines
library(skimr)
g_math %>%
skim(pretest)
library(emmeans)
p1 <- summary(emmeans(seg, "pre1", at=list(pre1=c(180, cutoff), pre2=0, jump=0)))
p2 <- summary(emmeans(seg, "pre1", at=list(pre1=c(cutoff, 270), pre2=c(0, (270-cutoff)), jump=1),
by="pre2"))
p2 <- p2 %>% #Just the first and last row
slice(c(1,4))
#Graph it!
g <- simpleScatter(g_math, pretest, posttest, title="Raw Data")
g +
labs(subtitle="Segmented Regression") +
geom_vline(xintercept = 215, linetype="dashed", color="green") +
geom_line(data=p1, aes(x=pre1, y=emmean), color="red") +
geom_line(data=p2, aes(x=pre1, y=emmean), color="red")
#Graph it! MEANS
g_mns +
labs(subtitle="Segmented Regression") +
geom_vline(xintercept = 215, linetype="dashed", color="green") +
geom_line(data=p1, aes(x=pre1, y=emmean), color="red") +
geom_line(data=p2, aes(x=pre1, y=emmean), color="red")
#Code for slope of zero
g_math <- g_math %>%
mutate(pre1_is = case_when(pretest >= cutoff ~ cutoff,
TRUE ~ pretest))
#Re-run model
seg_is <- lm(posttest ~ pre1_is + jump + pre2, data=g_math)
summary(seg_is)
library(SDSRegressionR)
library(SDSRegressionR)
#Bring in data
gss <- read_csv("data/GSSData")
names(gss)
#Bring in data
gss <- read_csv("data/GSSData.csv")
names(gss)
View(gss)
#Code the data for the cut-off
gss2 <- gss %>%
mutate_at(vars(educ), as.numeric) %>% #Initial catch all for numeric...
mutate(educ1 = educ, #Simple replication
educ2 = educ - cutoff, #Start second segment counting...
pre2 = case_when(educ1 <= cutoff ~ 0, #Make sure to start at zero BEFORE segment
TRUE ~ educ2),
jump = case_when(educ < cutoff ~ 0, #Define the segment status...
educ >= cutoff ~ 1))
#Establish cut-off
cutoff <- 12
#Code the data for the cut-off
gss2 <- gss %>%
mutate_at(vars(educ), as.numeric) %>% #Initial catch all for numeric...
mutate(educ1 = educ, #Simple replication
educ2 = educ - cutoff, #Start second segment counting...
pre2 = case_when(educ1 <= cutoff ~ 0, #Make sure to start at zero BEFORE segment
TRUE ~ educ2),
jump = case_when(educ < cutoff ~ 0, #Define the segment status...
educ >= cutoff ~ 1))
#Check
plyr::count(gss2, c("educ", "educ1", "educ2", "jump"))
#Code the data for the cut-off
gss2 <- gss %>%
mutate_at(vars(educ), as.numeric) %>% #Initial catch all for numeric...
mutate(educ1 = educ, #Simple replication
educ2 = educ - cutoff, #Start second segment counting...
educ2 = case_when(educ1 <= cutoff ~ 0, #Make sure to start at zero BEFORE segment
TRUE ~ educ2),
jump = case_when(educ < cutoff ~ 0, #Define the segment status...
educ >= cutoff ~ 1))
#Check
plyr::count(gss2, c("educ", "educ1", "educ2", "jump"))
#Inital model run and diagnostics
full <- lm(realrinc ~ educ1 + jump + educ2, data=gss2)
residFitted(full)
cooksPlot(full, key.variable="ID", print.obs=TRUE, sort.obs = TRUE)
residFitted(full)
cooksPlot(full, key.variable="UID", print.obs=TRUE, sort.obs = TRUE)
g_gss <- gss2 %>%
filter(UID %not in% c(ID_27289,ID_26725,ID_11432,ID_11075))
g_gss <- gss2 %>%
filter(UID %not in% c('ID_27289','ID_26725','ID_11432','ID_11075'))
#Initial look
simpleScatter(g_gss, educ, realrinc, title="Raw Data")
#Look with means
mns_gss <- g_gss %>%
group_by(educ) %>%
summarise(mean = mean(realrinc, rm.rm=TRUE))
g_mns <- simpleScatter(mns_gss, pretest, educ, title="Means Plot")
g_mns
g_mns <- simpleScatter(mns_gss, educ, mean, title="Means Plot")
g_mns
g_mns <- simpleScatter(mns_gss, educ, mean, title="Means Plot")
g_mns
#Initial look
simpleScatter(g_gss, educ, realrinc, title="Raw Data")
#Look with means
mns_gss <- g_gss %>%
group_by(educ) %>%
summarise(mean = mean(realrinc, rm.rm=TRUE))
g_mns <- simpleScatter(mns_gss, educ, mean, title="Means Plot")
g_mns
#Look with means
mns_gss <- g_gss %>%
group_by(educ) %>%
summarise(mean = mean(realrinc))
g_mns <- simpleScatter(mns_gss, educ, mean, title="Means Plot")
g_mns
#Run the model
seg <- lm(realrinc ~ educ1 + jump + educ2, data=g_gss)
summary(seg)
g_gss %>%
skim(educ)
#Come up with prediction lines
library(skimr)
g_gss %>%
skim(educ)
library(emmeans)
p1 <- summary(emmeans(seg, "educ1", at=list(educ1=c(0, cutoff), educ2=0, jump=0)))
p2 <- summary(emmeans(seg, "educ1", at=list(educ1=c(cutoff, 20), educ2=c(0, (270-cutoff)), jump=1),
by="educ2"))
p2 <- p2 %>% #Just the first and last row
slice(c(1,4))
#Graph it!
g <- simpleScatter(g_gss, educ, realrinc, title="Raw Data")
g +
labs(subtitle="Segmented Regression") +
geom_vline(xintercept = 12, linetype="dashed", color="green") +
geom_line(data=p1, aes(x=educ1, y=emmean), color="red") +
geom_line(data=p2, aes(x=educ1, y=emmean), color="red")
#Code for slope of zero
g_gss <- g_gss %>%
mutate(educ1_is = case_when(educ >= cutoff ~ cutoff,
TRUE ~ educ))
#Re-run model
seg_is <- lm(posttest ~ educ1_is + jump + educ2, data=g_gss)
#Re-run model
seg_is <- lm(realrinc ~ educ1_is + jump + educ2, data=g_gss)
summary(seg_is)
library(SDSRegressionR)
#Bring in data
gss <- read_csv("data/GSSData.csv")
names(gss)
#Establish cut-off
cutoff <- 12
#Code the data for the cut-off
gss2 <- gss %>%
mutate_at(vars(educ), as.numeric) %>% #Initial catch all for numeric...
mutate(educ1 = educ, #Simple replication
educ2 = educ - cutoff, #Start second segment counting...
educ2 = case_when(educ1 <= cutoff ~ 0, #Make sure to start at zero BEFORE segment
TRUE ~ educ2),
jump = case_when(educ < cutoff ~ 0, #Define the segment status...
educ >= cutoff ~ 1))
#Check
plyr::count(gss2, c("educ", "educ1", "educ2", "jump"))
#Inital model run and diagnostics
full <- lm(realrinc ~ educ1 + jump + educ2, data=gss2)
residFitted(full)
cooksPlot(full, key.variable="UID", print.obs=TRUE, sort.obs = TRUE)
threeOuts(full, key.variable="UID")
#Get good data...
g_gss <- gss2 %>%
filter(UID %not in% c('ID_27289','ID_26725','ID_11432','ID_11075'))
#Run the model
seg <- lm(realrinc ~ educ1 + jump + educ2, data=g_gss)
#Initial look
simpleScatter(g_gss, educ, realrinc, title="Raw Data")
#Look with means
mns_gss <- g_gss %>%
group_by(educ) %>%
summarise(mean = mean(realrinc, rm.rm=TRUE))
View(mns_gss)
View(mns_gss)
#Look with means
mns_gss <- g_gss %>%
group_by(educ) %>%
summarise(mean = mean(realrinc))
View(mns_gss)
View(g_gss)
#Look with means
mns_gss <- g_gss %>%
group_by(educ) %>%
summarise(mean = mean(realrinc, rm.rm=TRUE, as.numeric))
#Look with means
mns_gss <- g_gss %>%
group_by(educ) %>%
summarise(mean = mean(realrinc, as.numeric, rm.rm=TRUE))
g_mns <- simpleScatter(mns_gss, educ, mean, title="Means Plot")
g_mns
#Look with means
mns_gss <- g_gss %>%
group_by(educ) %>%
summarise(mean = mean(realrinc, rm.rm=TRUE))
View(mns_gss)
#Look with means
g_gss <- g_gss %>%
mutate_at(vars(realrinc), as.numeric)
mns_gss <- g_gss %>%
group_by(educ) %>%
summarise(mean = mean(realrinc, rm.rm=TRUE))
g_mns <- simpleScatter(mns_gss, educ, mean, title="Means Plot")
g_mns
View(mns_gss)
View(gss2)
View(g_gss)
mns_gss <- g_gss %>%
group_by(educ) %>%
summarise(mean = mean(realrinc, rm=TRUE))
View(mns_gss)
View(mns_gss)
mns_gss <- g_gss %>%
group_by(educ) %>%
summarise(mean ~ mean(realrinc, rm=TRUE))
#Look with means
g_gss <- g_gss %>%
mutate_at(vars(realrinc), as.numeric)
View(g_gss)
names(g_gss)
str(g_gss)
mns_gss <- g_gss %>%
group_by(educ) %>%
summarise(mean = mean(realrinc, rm=TRUE))
g_gss %>%
group_by(educ) %>%
summarise(mean = mean(realrinc, rm=TRUE))
p2 <- summary(emmeans(seg, "educ1", at=list(educ1=c(cutoff, 20), educ2=c(0, (20-cutoff)), jump=1),
by="educ2"))
p2 <- p2 %>% #Just the first and last row
slice(c(1,4))
#Graph it!
g <- simpleScatter(g_gss, educ, realrinc, title="Raw Data")
g +
labs(subtitle="Segmented Regression") +
geom_vline(xintercept = 12, linetype="dashed", color="green") +
geom_line(data=p1, aes(x=educ1, y=emmean), color="red") +
geom_line(data=p2, aes(x=educ1, y=emmean), color="red")
#Lab10: Segmented Regression
library(SDSRegressionR)
#Bring in data
gss <- read_csv("data/GSSData.csv")
names(gss)
#Establish cut-off
cutoff <- 12
#Code the data for the cut-off
gss2 <- gss %>%
mutate_at(vars(educ), as.numeric) %>% #Initial catch all for numeric...
mutate(educ1 = educ, #Simple replication
educ2 = educ - cutoff, #Start second segment counting...
educ2 = case_when(educ1 <= cutoff ~ 0, #Make sure to start at zero BEFORE segment
TRUE ~ educ2),
jump = case_when(educ < cutoff ~ 0, #Define the segment status...
educ >= cutoff ~ 1))
#Check
plyr::count(gss2, c("educ", "educ1", "educ2", "jump"))
#Inital model run and diagnostics
full <- lm(realrinc ~ educ1 + jump + educ2, data=gss2)
residFitted(full)
cooksPlot(full, key.variable="UID", print.obs=TRUE, sort.obs = TRUE)
threeOuts(full, key.variable="UID")
#Get good data...
g_gss <- gss2 %>%
filter(UID %not in% c('ID_27289','ID_26725','ID_11432','ID_11075'))
#Initial look
simpleScatter(g_gss, educ, realrinc, title="Raw Data")
#Look with means
g_gss <- g_gss %>%
mutate_at(vars(realrinc), as.numeric)
str(g_gss)
g_gss %>%
group_by(educ) %>%
summarise(mean = mean(realrinc, rm=TRUE))
g_mns <- simpleScatter(mns_gss, educ, mean, title="Means Plot")
g_mns
#Run the model
seg <- lm(realrinc ~ educ1 + jump + educ2, data=g_gss)
summary(seg)
#Come up with prediction lines
library(skimr)
g_gss %>%
skim(educ)
library(emmeans)
p1 <- summary(emmeans(seg, "educ1", at=list(educ1=c(0, cutoff), educ2=0, jump=0)))
p2 <- summary(emmeans(seg, "educ1", at=list(educ1=c(cutoff, 20), educ2=c(0, (20-cutoff)), jump=1),
by="educ2"))
p2 <- p2 %>% #Just the first and last row
slice(c(1,4))
#Graph it!
g <- simpleScatter(g_gss, educ, realrinc, title="Raw Data")
g +
labs(subtitle="Segmented Regression") +
geom_vline(xintercept = 12, linetype="dashed", color="green") +
geom_line(data=p1, aes(x=educ1, y=emmean), color="red") +
geom_line(data=p2, aes(x=educ1, y=emmean), color="red")
#Graph it! MEANS
g_mns +
labs(subtitle="Segmented Regression") +
geom_vline(xintercept = 12, linetype="dashed", color="green") +
geom_line(data=p1, aes(x=pre1, y=emmean), color="red") +
geom_line(data=p2, aes(x=pre1, y=emmean), color="red")
#Code for slope of zero
g_gss <- g_gss %>%
mutate(educ1_is = case_when(educ >= cutoff ~ cutoff,
TRUE ~ educ))
#Re-run model
seg_is <- lm(realrinc ~ educ1_is + jump + educ2, data=g_gss)
summary(seg_is)
g_gss %>%
group_by(educ) %>%
summarise(mean = mean(realrinc, rm.rm=TRUE))
mean(realrinc, r.rm=TRUE)
mean(g_gss$realrinc, rm.rm=TRUE)
View(g_gss)
mean(g_gss$realrinc, rm.rm=FALSE)
mean(g_gss$realrinc, na.rm=TRUE)
#Lab10: Segmented Regression
library(SDSRegressionR)
#Bring in data
gss <- read_csv("data/GSSData.csv")
names(gss)
#Establish cut-off
cutoff <- 12
#Code the data for the cut-off
gss2 <- gss %>%
mutate_at(vars(educ), as.numeric) %>% #Initial catch all for numeric...
mutate(educ1 = educ, #Simple replication
educ2 = educ - cutoff, #Start second segment counting...
educ2 = case_when(educ1 <= cutoff ~ 0, #Make sure to start at zero BEFORE segment
TRUE ~ educ2),
jump = case_when(educ < cutoff ~ 0, #Define the segment status...
educ >= cutoff ~ 1))
#Check
plyr::count(gss2, c("educ", "educ1", "educ2", "jump"))
#Inital model run and diagnostics
full <- lm(realrinc ~ educ1 + jump + educ2, data=gss2)
residFitted(full)
cooksPlot(full, key.variable="UID", print.obs=TRUE, sort.obs = TRUE)
threeOuts(full, key.variable="UID")
#Get good data...
g_gss <- gss2 %>%
filter(UID %not in% c('ID_27289','ID_26725','ID_11432','ID_11075'))
#Initial look
simpleScatter(g_gss, educ, realrinc, title="Raw Data")
#Look with means
mns_gss <- g_gss %>%
group_by(educ) %>%
summarise(mean = mean(realrinc, na.rm=TRUE))
g_mns <- simpleScatter(mns_gss, educ, mean, title="Means Plot")
g_mns
#Run the model
seg <- lm(realrinc ~ educ1 + jump + educ2, data=g_gss)
summary(seg)
#Come up with prediction lines
library(skimr)
g_gss %>%
skim(educ)
library(emmeans)
p1 <- summary(emmeans(seg, "educ1", at=list(educ1=c(0, cutoff), educ2=0, jump=0)))
p2 <- summary(emmeans(seg, "educ1", at=list(educ1=c(cutoff, 20), educ2=c(0, (20-cutoff)), jump=1),
by="educ2"))
p2 <- p2 %>% #Just the first and last row
slice(c(1,4))
#Graph it!
g <- simpleScatter(g_gss, educ, realrinc, title="Raw Data")
g +
labs(subtitle="Segmented Regression") +
geom_vline(xintercept = 12, linetype="dashed", color="green") +
geom_line(data=p1, aes(x=educ1, y=emmean), color="red") +
geom_line(data=p2, aes(x=educ1, y=emmean), color="red")
#Graph it! MEANS
g_mns +
labs(subtitle="Segmented Regression") +
geom_vline(xintercept = 12, linetype="dashed", color="green") +
geom_line(data=p1, aes(x=pre1, y=emmean), color="red") +
geom_line(data=p2, aes(x=pre1, y=emmean), color="red")
#Code for slope of zero
g_gss <- g_gss %>%
mutate(educ1_is = case_when(educ >= cutoff ~ cutoff,
TRUE ~ educ))
#Re-run model
seg_is <- lm(realrinc ~ educ1_is + jump + educ2, data=g_gss)
summary(seg_is)
g_mns <- simpleScatter(mns_gss, educ, mean, title="Means Plot")
g_mns
#Graph it!
g <- simpleScatter(g_gss, educ, realrinc, title="Raw Data")
g +
labs(subtitle="Segmented Regression") +
geom_vline(xintercept = 12, linetype="dashed", color="green") +
geom_line(data=p1, aes(x=educ1, y=emmean), color="red") +
geom_line(data=p2, aes(x=educ1, y=emmean), color="red")
#Graph it! MEANS
g_mns +
labs(subtitle="Segmented Regression") +
geom_vline(xintercept = 12, linetype="dashed", color="green") +
geom_line(data=p1, aes(x=pre1, y=emmean), color="red") +
geom_line(data=p2, aes(x=pre1, y=emmean), color="red")
g_mns <- simpleScatter(mns_gss, educ, mean, title="Means Plot")
#Graph it! MEANS
g_mns +
labs(subtitle="Segmented Regression") +
geom_vline(xintercept = 12, linetype="dashed", color="green") +
geom_line(data=p1, aes(x=pre1, y=emmean), color="red") +
geom_line(data=p2, aes(x=pre1, y=emmean), color="red")
#Graph it! MEANS
g_mns +
labs(subtitle="Segmented Regression") +
geom_vline(xintercept = 12, linetype="dashed", color="green") +
geom_line(data=p1, aes(x=educ1, y=emmean), color="red") +
geom_line(data=p2, aes(x=educ1, y=emmean), color="red")
#Graph it!
g <- simpleScatter(g_gss, educ, realrinc, title="Raw Data")
g +
labs(subtitle="Segmented Regression") +
geom_vline(xintercept = 12, linetype="dashed", color="green") +
geom_line(data=p1, aes(x=educ1, y=emmean), color="red") +
geom_line(data=p2, aes(x=educ1, y=emmean), color="red")
#Graph it! MEANS
g_mns +
labs(subtitle="Segmented Regression") +
geom_vline(xintercept = 12, linetype="dashed", color="green") +
geom_line(data=p1, aes(x=educ1, y=emmean), color="red") +
geom_line(data=p2, aes(x=educ1, y=emmean), color="red")
