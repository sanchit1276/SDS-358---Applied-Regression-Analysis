cooks <- cooksPlot(fullg, key.variable = "video_id", print.obs = TRUE,
sort.obs=TRUE, save.cutoff = TRUE)
#Clean up again
g_vid <- vid %>%
filter(video_id %not in% cooks$video_id)
#Re-run the model
fullg <- lm(comment_count ~ category_id + views + likes + dislikes, data=g_vid)
#Re-check assumptions
vif(fullg)
residFitted(fullg)
cooks <- cooksPlot(fullg, key.variable = "video_id", print.obs = FALSE,
sort.obs=TRUE, save.cutoff = TRUE)
library(SDSRegressionR)
#import data...
vid <- read_csv("USvideos.csv")
names(vid)
#Examine the categorical variables:
table(vid$category_id, useNA = "always")
#Factor
vid <- vid %>%
mutate(category_id = factor(category_id))
#Determine and run the full model to check for assumptions
full <- lm(comment_count ~ category_id + views + likes + dislikes, data=vid)
#Look for any issues:
library(car)
vif(full)
residFitted(full)
cooks <- cooksPlot(full, key.variable = "video_id", print.obs = TRUE,
sort.obs=TRUE, save.cutoff = TRUE)
View(cooks)
cooks
#Clean up
g_vid <- vid %>%
filter(video_id %not in% cooks$video_id)
#Re-run the model
fullg <- lm(comment_count ~ category_id + views + likes + dislikes, data=g_vid)
#Re-check assumptions
vif(fullg)
residFitted(fullg)
cooks <- cooksPlot(fullg, key.variable = "video_id", print.obs = TRUE,
sort.obs=TRUE, save.cutoff = TRUE)
#Clean up again
g_vid <- vid %>%
filter(video_id %not in% cooks$video_id)
cooks
cooks <- cooksPlot(fullg, key.variable = "video_id", print.obs = TRUE,
sort.obs=TRUE, save.cutoff = TRUE)
cooks
g_vid <- g_vid %>%
filter(video_id %not in% c('p8npDG2ulKQ'))
g_vid <- g_vid %>%
filter(video_id %not in% c(p8npDG2ulKQ))
g_vid <- g_vid %>%
filter(video_id %not in% c('p8npDG2ulKQ'))
g_vid <- g_vid %>%
filter(video_id %not in% c('p8npDG2ulKQ'))
library(SDSRegressionR)
#import data...
vid <- read_csv("USvideos.csv")
names(vid)
#Examine the categorical variables:
table(vid$category_id, useNA = "always")
#Factor
vid <- vid %>%
mutate(category_id = factor(category_id))
#Determine and run the full model to check for assumptions
full <- lm(comment_count ~ category_id + views + likes + dislikes, data=vid)
#Look for any issues:
library(car)
vif(full)
residFitted(full)
cooks <- cooksPlot(full, key.variable = "video_id", print.obs = TRUE,
sort.obs=TRUE, save.cutoff = TRUE)
#Clean up
g_vid <- vid %>%
filter(video_id %not in% cooks$video_id)
#Re-run the model
fullg <- lm(comment_count ~ category_id + views + likes + dislikes, data=g_vid)
#Re-check assumptions
vif(fullg)
residFitted(fullg)
cooks <- cooksPlot(fullg, key.variable = "video_id", print.obs = TRUE,
sort.obs=TRUE, save.cutoff = TRUE)
cooks
g_vid <- g_vid %>%
filter(video_id %not in% c('p8npDG2ulKQ'))
library(SDSRegressionR)
library(SDSRegressionR)
#import data...
vid <- read_csv("USvideos.csv")
names(vid)
#Examine the categorical variables:
table(vid$category_id, useNA = "always")
#Factor
vid <- vid %>%
mutate(category_id = factor(category_id))
#Determine and run the full model to check for assumptions
full <- lm(comment_count ~ category_id + views + likes + dislikes, data=vid)
#Look for any issues:
library(car)
vif(full)
residFitted(full)
cooks <- cooksPlot(full, key.variable = "video_id", print.obs = TRUE,
sort.obs=TRUE, save.cutoff = TRUE)
#Clean up
g_vid <- vid %>%
filter(video_id %not in% cooks$video_id)
#Re-run the model
fullg <- lm(comment_count ~ category_id + views + likes + dislikes, data=g_vid)
#Re-check assumptions
vif(fullg)
residFitted(fullg)
cooks <- cooksPlot(fullg, key.variable = "video_id", print.obs = TRUE,
sort.obs=TRUE, save.cutoff = TRUE)
cooks
#Clean up again
g_vid <- g_vid %>%
filter(video_id %not in% c('p8npDG2ulKQ'))
#Re-run the model
fullg <- lm(comment_count ~ category_id + views + likes + dislikes, data=g_vid)
#Re-check assumptions
vif(fullg)
residFitted(fullg)
cooks <- cooksPlot(fullg, key.variable = "video_id", print.obs = FALSE,
sort.obs=TRUE, save.cutoff = TRUE)
#Clean up final time
g_vid <- vid %>%
filter(video_id %not in% cooks$video_id)
#Re-run the model
fullg <- lm(comment_count ~ category_id + views + likes + dislikes, data=g_vid)
#Re-check assumptions
vif(fullg)
residFitted(fullg)
cooks <- cooksPlot(fullg, key.variable = "video_id", print.obs = TRUE,
sort.obs=TRUE, save.cutoff = TRUE)
library(SDSRegressionR)
#import data...
vid <- read_csv("USvideos.csv")
names(vid)
#Examine the categorical variables:
table(vid$category_id, useNA = "always")
#Factor
vid <- vid %>%
mutate(category_id = factor(category_id))
#Determine and run the full model to check for assumptions
full <- lm(comment_count ~ category_id + views + likes + dislikes, data=vid)
vif(full)
residFitted(full)
cooks <- cooksPlot(full, key.variable = "video_id", print.obs = TRUE,
sort.obs=TRUE, save.cutoff = TRUE)
#Look for any issues:
library(car)
#Clean up
g_vid <- vid %>%
filter(video_id %not in% cooks$video_id)
#Re-run the model
fullg <- lm(comment_count ~ category_id + views + likes + dislikes, data=g_vid)
#Re-check assumptions
vif(fullg)
residFitted(fullg)
cooks <- cooksPlot(fullg, key.variable = "video_id", print.obs = TRUE,
sort.obs=TRUE, save.cutoff = TRUE)
cooks
g_vid <- g_vid %>%
filter(video_id %not in% c('p8npDG2ulKQ'))
#Re-run the model
fullg <- lm(comment_count ~ category_id + views + likes + dislikes, data=g_vid)
#Re-check assumptions
vif(fullg)
residFitted(fullg)
cooks <- cooksPlot(fullg, key.variable = "video_id", print.obs = FALSE,
sort.obs=TRUE, save.cutoff = TRUE)
#Clean up final time
g_vid <- vid %>%
filter(video_id %not in% cooks$video_id)
library(SDSRegressionR)
#import data...
vid <- read_csv("USvideos.csv")
names(vid)
#Examine the categorical variables:
table(vid$category_id, useNA = "always")
#Factor
vid <- vid %>%
mutate(category_id = factor(category_id))
#Determine and run the full model to check for assumptions
full <- lm(comment_count ~ category_id + views + likes + dislikes, data=vid)
#Look for any issues:
library(car)
vif(full)
residFitted(full)
cooks <- cooksPlot(full, key.variable = "video_id", print.obs = TRUE,
sort.obs=TRUE, save.cutoff = TRUE)
#Clean up
g_vid <- vid %>%
filter(video_id %not in% cooks$video_id)
#Clean up
g_vid <- vid %>%
filter(video_id %not in% cooks$video_id)
#Re-run the model
fullg <- lm(comment_count ~ category_id + views + likes + dislikes, data=g_vid)
#Re-check assumptions
vif(fullg)
residFitted(fullg)
cooks <- cooksPlot(fullg, key.variable = "video_id", print.obs = TRUE,
sort.obs=TRUE, save.cutoff = TRUE)
g_vid <- g_vid %>%
filter(video_id %not in% c('p8npDG2ulKQ'))
#Re-run the model
fullg <- lm(comment_count ~ category_id + views + likes + dislikes, data=g_vid)
#Re-check assumptions
vif(fullg)
residFitted(fullg)
cooks <- cooksPlot(fullg, key.variable = "video_id", print.obs = FALSE,
sort.obs=TRUE, save.cutoff = TRUE)
cooks
#Get the "model data" for the nesting
good_vid_m2 <- modelData(fullg)
#Now for the Sequential Regression:
#Model 1:
m1_seq <- lm(comment_count ~ category_id + views, data=good_vid_m2)
summary(m1_seq)
summary(m1_seq)$r.squared*100
lmBeta(m1_seq)
pCorr(m1_seq)
#Model 2:
m2_seq <- lm(comment_count ~ category_id + views + likes + dislikes, data=good_vid_m2)
summary(m2_seq)
summary(m2_seq)$r.squared*100
lmBeta(m2_seq)
pCorr(m2_seq)
(summary(m2_seq)$r.squared - summary(m1_seq)$r.squared)*100
#Now the Sequential Results
anova(m1_seq, m2_seq)
simpleAnova(m1_seq)
simpleAnova(m2_seq)
library(SDSRegressionR)
#import data...
vid <- read_csv("USvideos.csv")
names(vid)
#Examine the categorical variables:
table(vid$category_id, useNA = "always")
#Factor
vid <- vid %>%
mutate(category_id = factor(category_id))
#Determine and run the full model to check for assumptions
full <- lm(comment_count ~ category_id + views + likes + dislikes, data=vid)
#Look for any issues:
library(car)
vif(full)
residFitted(full)
cooks <- cooksPlot(full, key.variable = "video_id", print.obs = TRUE,
sort.obs=TRUE, save.cutoff = TRUE)
#Clean up
g_vid <- vid %>%
filter(video_id %not in% cooks$video_id)
#Re-run the model
fullg <- lm(comment_count ~ category_id + views + likes + dislikes, data=g_vid)
#Re-check assumptions
vif(fullg)
residFitted(fullg)
cooks <- cooksPlot(fullg, key.variable = "video_id", print.obs = TRUE,
sort.obs=TRUE, save.cutoff = TRUE)
cooks
g_vid <- g_vid %>%
filter(video_id %not in% c('p8npDG2ulKQ', 'GnGPAYvve1A'))
#Re-run the model
fullg <- lm(comment_count ~ category_id + views + likes + dislikes, data=g_vid)
#Re-check assumptions
vif(fullg)
residFitted(fullg)
cooksPlot(fullg, key.variable = "video_id", print.obs = FALSE,
sort.obs=TRUE, save.cutoff = TRUE)
cooks
library(SDSRegressionR)
#import data...
vid <- read_csv("USvideos.csv")
names(vid)
#Examine the categorical variables:
table(vid$category_id, useNA = "always")
#Factor
vid <- vid %>%
mutate(category_id = factor(category_id))
#Determine and run the full model to check for assumptions
full <- lm(comment_count ~ category_id + views + likes + dislikes, data=vid)
#Look for any issues:
library(car)
vif(full)
residFitted(full)
cooks <- cooksPlot(full, key.variable = "video_id", print.obs = TRUE,
sort.obs=TRUE, save.cutoff = TRUE)
#Clean up
g_vid <- vid %>%
filter(video_id %not in% cooks$video_id)
#Re-run the model
fullg <- lm(comment_count ~ category_id + views + likes + dislikes, data=g_vid)
#Re-check assumptions
vif(fullg)
residFitted(fullg)
cooks <- cooksPlot(fullg, key.variable = "video_id", print.obs = TRUE,
sort.obs=TRUE, save.cutoff = TRUE)
cooks
g_vid2 <- g_vid %>%
filter(video_id %not in% c('p8npDG2ulKQ', 'GnGPAYvve1A'))
#Re-run the model
fullg <- lm(comment_count ~ category_id + views + likes + dislikes, data=g_vid2)
#Re-check assumptions
vif(fullg)
residFitted(fullg)
cooksPlot(fullg, key.variable = "video_id", print.obs = FALSE,
sort.obs=TRUE, save.cutoff = TRUE)
cooks
g_vid2 <- g_vid %>%
filter(video_id %not in% c('p8npDG2ulKQ', 'GnGPAYvve1A'))
g_vid2 <- g_vid %>%
filter(video_id %not in% c('p8npDG2ulKQ', 'GnGPAYvve1A'))
#Re-run the model
fullg <- lm(comment_count ~ category_id + views + likes + dislikes, data=g_vid2)
#Re-check assumptions
vif(fullg)
residFitted(fullg)
cooksPlot(fullg, key.variable = "video_id", print.obs = FALSE,
sort.obs=TRUE, save.cutoff = TRUE)
cooks
#Get the "model data" for the nesting
good_vid_m2 <- modelData(fullg)
#Now for the Sequential Regression:
#Model 1:
m1_seq <- lm(comment_count ~ category_id + views, data=good_vid_m2)
summary(m1_seq)
summary(m1_seq)$r.squared*100
lmBeta(m1_seq)
pCorr(m1_seq)
#Model 2:
m2_seq <- lm(comment_count ~ category_id + views + likes + dislikes, data=good_vid_m2)
summary(m2_seq)
summary(m2_seq)$r.squared*100
lmBeta(m2_seq)
pCorr(m2_seq)
(summary(m2_seq)$r.squared - summary(m1_seq)$r.squared)*100
#Now the Sequential Results
anova(m1_seq, m2_seq)
simpleAnova(m1_seq)
simpleAnova(m2_seq)
simpleAnova(m1_seq)
simpleAnova(m2_seq)
simpleAnova(m1_seq)
#Graph it!
g <- simpleScatter(good_vid_m2, comment_count, likes, title="Raw Data")
library(SDSRegressionR)
#Graph it!
g <- simpleScatter(good_vid_m2, comment_count, likes, title="Raw Data")
g
#Graph it!
g <- simpleScatter(good_vid_m2, comment_count, dislikes, title="Raw Data")
g
#Graph it!
g <- simpleScatter(good_vid_m2, comment_count, dislikes, title="Raw Data")
g +
labs(subtitle="Segmented Regression") +
geom_line(data=good_vid_m2, aes(x=dislikes, y=comment_count), color="red")
g +
labs(subtitle="Number of Dislikes ") +
abline(lm(comment_count ~ dislikes))
g +
labs(subtitle="Number of Dislikes ") +
abline(lm(comment_count ~ dislikes, good_vid_m2))
#Graph it!
g <- simpleScatter(good_vid_m2, comment_count, dislikes, title="Raw Data")
g +
labs(subtitle="Number of Dislikes ") +
abline(lm(comment_count ~ dislikes, good_vid_m2))
#Graph it!
simpleScatter(good_vid_m2, comment_count, likes, title="Likes vs Comments")
simpleScatter(good_vid_m2, comment_count, dislikes, title="Dislikes vs Comments")
#Model 2 - both likes and dislikes:
m2_seq <- lm(comment_count ~ category_id + views + likes + dislikes, data=good_vid_m2)
summary(m2_seq)
#Graph it!
simpleScatter(good_vid_m2, comment_count, likes, title="Likes vs Comments")+abline(1.827e+03, 9.227e-02)
#Graph it!
plot.new
simpleScatter(good_vid_m2, comment_count, likes, title="Likes vs Comments")+abline(1.827e+03, 9.227e-02)
# 3D Scatterplot with Coloring and Vertical Lines
# and Regression Plane
library(scatterplot3d)
attach(mtcars)
s3d <-scatterplot3d(likes,dislikes,comment_count, pch=16, highlight.3d=TRUE,
type="h", main="3D Scatterplot")
install.packages("scatterplot3d")
# 3D Scatterplot with Coloring and Vertical Lines
# and Regression Plane
library(scatterplot3d)
attach(mtcars)
s3d <-scatterplot3d(likes,dislikes,comment_count, pch=16, highlight.3d=TRUE,
type="h", main="3D Scatterplot")
s3d <-scatterplot3d(good_vid_m2$likes,good_vid_m2$dislikes,good_vid_m2$comment_count, pch=16, highlight.3d=TRUE,
type="h", main="3D Scatterplot")
fit <- lm(comment_count ~ likes+dislikes)
s3d$plane3d(fit)
s3d <-scatterplot3d(good_vid_m2$likes,good_vid_m2$dislikes,good_vid_m2$comment_count, pch=16, highlight.3d=FALSE,
type="h", main="3D Scatterplot")
fit <- lm(comment_count ~ likes+dislikes)
s3d$plane3d(fit)
s3d <-scatterplot3d(good_vid_m2$likes,good_vid_m2$dislikes,good_vid_m2$comment_count, pch=5, highlight.3d=TRUE,
type="h", main="3D Scatterplot")
fit <- lm(comment_count ~ likes+dislikes)
s3d$plane3d(fit)
s3d <-scatterplot3d(good_vid_m2$likes,good_vid_m2$dislikes,good_vid_m2$comment_count, pch=5, highlight.3d=TRUE,
type="h", main="3D Scatterplot", xlab='Number of Likes', ylab='Number of Comments', zlab = 'Number of Dislikes')
fit <- lm(comment_count ~ likes+dislikes)
s3d$plane3d(fit)
s3d <-scatterplot3d(good_vid_m2$likes,good_vid_m2$dislikes,good_vid_m2$comment_count, pch=16, highlight.3d=TRUE,
type="h", main="3D Scatterplot of Variables of Interest", xlab='Number of Likes', ylab='Number of Comments', zlab = 'Number of Dislikes')
fit <- lm(comment_count ~ likes+dislikes)
s3d$plane3d(fit)
s3d <-scatterplot3d(good_vid_m2$likes,good_vid_m2$dislikes,good_vid_m2$comment_count, pch=16, highlight.3d=TRUE,
type="h", main="3D Scatterplot of Variables of Interest", xlab='Number of Likes', ylab='Number of Comments', zlab = 'Number of Dislikes',grid=TRUE, box=FALSE)
fit <- lm(comment_count ~ likes+dislikes)
s3d$plane3d(fit)
)
s3d <-scatterplot3d(good_vid_m2$likes,good_vid_m2$dislikes,good_vid_m2$comment_count, pch=16, highlight.3d=TRUE,
type="h", main="3D Scatterplot of Variables of Interest", xlab='Number of Likes', ylab='Number of Comments', zlab = 'Number of Dislikes')
scatterplot3d(good_vid_m2$likes,good_vid_m2$dislikes,good_vid_m2$comment_count, pch=16, highlight.3d=TRUE,
type="h", main="3D Scatterplot of Variables of Interest", xlab='Number of Likes', ylab='Number of Comments', zlab = 'Number of Dislikes')
fit <- lm(comment_count ~ likes+dislikes)
s3d$plane3d(fit)
fit <- lm(comment_count ~ likes+dislikes,good_vid_m2 )
s3d$plane3d(fit)
scatterplot3d(good_vid_m2$likes,good_vid_m2$comment_count,good_vid_m2$dislikes, pch=16, highlight.3d=TRUE,
type="h", main="3D Scatterplot of Variables of Interest", xlab='Number of Likes', ylab='Number of Comments', zlab = 'Number of Dislikes')
fit <- lm(comment_count ~ likes+dislikes,good_vid_m2 )
s3d$plane3d(fit)
scatterplot3d(good_vid_m2$likes,good_vid_m2$dislikes,good_vid_m2$comment_count, pch=16, highlight.3d=TRUE,
type="h", main="3D Scatterplot of Variables of Interest", xlab='Number of Likes', zlab='Number of Comments', ylab = 'Number of Dislikes')
fit <- lm(comment_count ~ likes+dislikes,good_vid_m2 )
s3d$plane3d(fit)
summary(m2_seq)
#Examine the categorical variable:
table(good_vid_m2$category_id)
good_vid_m2 %>%
skim(comment_count, likes, dislikes, views)
#Descriptives table
library(skimr)
good_vid_m2 %>%
skim(comment_count, likes, dislikes, views)
library(SDSRegressionR)
#import data...
vid <- read_csv("USvideos.csv")
names(vid)
#Examine the categorical variables:
table(vid$category_id, useNA = "always")
#Factor
vid <- vid %>%
mutate(category_id = factor(category_id))
#Determine and run the full model to check for assumptions
full <- lm(comment_count ~ category_id + views + likes + dislikes, data=vid)
#Look for any issues:
library(car)
vif(full)
residFitted(full)
# 3D Exploded Pie Chart
library(plotrix)
install.packages("plotrix")
# 3D Exploded Pie Chart
library(plotrix)
slices <- c(10, 12, 4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pie3D(slices,labels=lbls,explode=0.1,
main="Pie Chart of Countries ")
slices <- c(50, 12, 4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pie3D(slices,labels=lbls,explode=0.1,
main="Pie Chart of Countries ")
pie3D(slices,labels=lbls,explode=0.1,
main="Variance in Number of Comments")
# 3D Exploded Pie Chart
library(plotrix)
slices <- c(34.25, 43.68, 22.07)
lbls <- c("Likes+Dislikes", "Cat+Views", "Unexplained")
pie3D(slices,labels=lbls,explode=0.1,
main="Variance in Number of Comments")
# Pie Chart with Percentages
slices <- c(34.25, 43.68, 22.07)
lbls <- c("Likes+Dislikes", "Cat+Views", "Unexplained")
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pct <- round(slices/sum(slices)*100)
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Pie Chart of Countries")
# Pie Chart with Percentages
slices <- c(10, 12, 4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Pie Chart of Countries")
slices <- c(34.25, 43.68, 22.07)
lbls <- c("Likes+Dislikes", "Cat+Views", "Unexplained")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Pie Chart of Countries")
# Pie Chart with Percentages
slices <- c(34.25, 43.68, 22.07)
lbls <- c("Likes+Dislikes", "Cat+Views", "Unexplained")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Variance in Number of Comments")
